====
==== mac_api_dm.txt : a demo on the use of library gn.frames
====

>>> import os
>>> import mac_api
>>> import mac_mgmt


==
== show fields for different types of frames
==

A dictionary with an object for each type of frame:
>>> dc_frmobjs = mac_api.dc_frmobjs
>>> dc_frmobjs.keys()
['CTS', 'ACK', 'Beacon', 'FC', 'RTS', 'Action', 'DATA']

Get objects of given type, subtype
>>> 


Show field names for each type of frame.
>>> for frmtype in dc_frmobjs.keys():
...     print '%6s:' % (frmtype,),
...     for fld in dc_frmobjs[frmtype].ls_fields:
...         print fld,
...     print
   CTS: frame_ctrl duration ra fcs
   ACK: frame_ctrl duration ra fcs
Beacon: frame_ctrl duration address_1 address_2 address_3 seq_ctrl frame_body fcs
    FC: ProtVer Type SubType ToDS FromDS MoreFrags Retry PwrMgmt MoreData Protected Order
   RTS: frame_ctrl duration ra ta fcs
Action: frame_ctrl duration address_1 address_2 address_3 seq_ctrl frame_body fcs
  DATA: frame_ctrl duration address_1 address_2 address_3 seq_ctrl qos ht address_4 frame_body fcs




==
== pack different types of frames
==

Warning: packing of succesive frames of the same type use the same object! If new field values are not given, formerly set values remain. No default field values have been defined to date, except for ProtVer, Type and SubType in frame control, which are defined for each type of frame.

In the following examples,
  FC (Frame Control) fields are set in dictionary fc_dc_fldvals, see above for FC fields.
  frame fields are set in dictionary fr_dc_fldvals, see above for RTS, CTS, ACK, DATA.
  
>>> pk_rts = mac_api.mkfrpkt('RTS', dc_frmobjs, \
...     fc_dc_fldvals={'ToDS':1, 'FromDS':1, 'Retry':1}, \
...     fr_dc_fldvals={'ra':'rts-ra', 'ta':'rts-ta', 'fcs':55})
>>> pk_cts = mac_api.mkfrpkt('CTS', dc_frmobjs, \
...     fc_dc_fldvals={'ToDS':1, 'FromDS':0, 'Retry':0, 'PwrMgmt':1}, \
...     fr_dc_fldvals={'ra':'cts-ra', 'duration':123, 'fcs':44})
>>> pk_ack = mac_api.mkfrpkt('ACK', dc_frmobjs, \
...     fc_dc_fldvals={'ToDS':1, 'FromDS':1, 'Retry':1, 'Protected':1}, \
...     fr_dc_fldvals={'ra':'ack-ra', 'duration':123, 'fcs':33})
>>> pk_data = mac_api.mkfrpkt('DATA', dc_frmobjs, \
...     fc_dc_fldvals={'ToDS':1, 'FromDS':1, 'Retry':1}, \
...     fr_dc_fldvals={'frame_body':'this is data', 'duration':3, 'fcs':22})

Define frame body for a Beacon frame, update frame body in management frame:
>>> #fb_be = mac_mgmt.BeaconFrameBody()
>>> #fb_be.updtfldvals(dc_fldvals={'Timestamp':3, 'BeaconInterval':33, 'SSID':chr(0) + chr(32) + 'The SSID for this Beacon frame--'})
>>> fb_be = mac_mgmt.BeaconFrameBody(dc_fldvals={'Timestamp':3, 'BeaconInterval':33, 'SSID':chr(0) + chr(32) + 'The SSID for this Beacon frame--'})
>>> fb_be_pk = fb_be.mkpkt()
>>> len(fb_be_pk), fb_be_pk
(58, '\x00\x00\x00\x00\x00\x00\x00\x03\x00!\x00\x00\x00 The SSID for this Beacon frame--\x01\nRRRRRRRRRR')
>>> fb_be.prt_dc_fldvals()
 Timestamp: 3
BeaconInterval: 33
CapabilitiesInfo: 0
      SSID:  The SSID for this Beacon frame--
SupportedRates: 
RRRRRRRRRR

>>> pk_beacon = mac_api.mkfrpkt('Beacon', dc_frmobjs, \
...     fr_dc_fldvals={'frame_body':fb_be_pk})
>>> len(pk_beacon), pk_beacon
(86, '\x80[\x00\x00dt-ad1dt-ad2dt-ad3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00!\x00\x00\x00 The SSID for this Beacon frame--\x01\nRRRRRRRRRR\x00\x00\x00\x00')

Show the packets:
>>> '%4s : [ %s ]' % ('RTS', pk_rts)
' RTS : [ \xb4\x0b\x00\x00rts-rarts-ta\x00\x00\x007 ]'
>>> '%4s : [ %s ]' % ('CTS', pk_cts)
' CTS : [ \xc4\x11\x00{cts-ra\x00\x00\x00, ]'
>>> '%4s : [ %s ]' % ('ACK', pk_rts)
' ACK : [ \xb4\x0b\x00\x00rts-rarts-ta\x00\x00\x007 ]'
>>> '%4s : [ %s ]' % ('DATA', pk_data)
'DATA : [ \x08[\x00\x03dt-ad1dt-ad2dt-ad3\x00\x00\x00\x00\x00\x00\x00\x00dt-ad2this is data\x00\x00\x00\x16 ]'
>>> '%4s : [ %s ]' % ('Beacon', pk_beacon)
'Beacon : [ \x80[\x00\x00dt-ad1dt-ad2dt-ad3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00!\x00\x00\x00 The SSID for this Beacon frame--\x01\nRRRRRRRRRR\x00\x00\x00\x00 ]'


==
== unpack frames, detect type, show field contents
==

>>> frmtype, fc_dic, fr_dic = mac_api.mkdics(pk_rts, dc_frmobjs)
>>> frmtype
'RTS'
>>> dc_frmobjs['FC'].prt_dc_fldvals(fc_dic)
   ProtVer: 0
      Type: 1
   SubType: 11
      ToDS: 1
    FromDS: 1
 MoreFrags: 0
     Retry: 1
   PwrMgmt: 0
  MoreData: 0
 Protected: 0
     Order: 0
>>> dc_frmobjs[frmtype].prt_dc_fldvals(fr_dic)
frame_ctrl: 46091
  duration: 0
        ra: rts-ra
        ta: rts-ta
       fcs: 55

>>> frmtype, fc_dic, fr_dic = mac_api.mkdics(pk_cts, dc_frmobjs)
>>> frmtype
'CTS'
>>> dc_frmobjs['FC'].prt_dc_fldvals(fc_dic)
   ProtVer: 0
      Type: 1
   SubType: 12
      ToDS: 1
    FromDS: 0
 MoreFrags: 0
     Retry: 0
   PwrMgmt: 1
  MoreData: 0
 Protected: 0
     Order: 0
>>> dc_frmobjs[frmtype].prt_dc_fldvals(fr_dic)
frame_ctrl: 50193
  duration: 123
        ra: cts-ra
       fcs: 44

>>> frmtype, fc_dic, fr_dic = mac_api.mkdics(pk_ack, dc_frmobjs)
>>> frmtype
'ACK'
>>> dc_frmobjs['FC'].prt_dc_fldvals(fc_dic)
   ProtVer: 0
      Type: 1
   SubType: 13
      ToDS: 1
    FromDS: 1
 MoreFrags: 0
     Retry: 1
   PwrMgmt: 1
  MoreData: 0
 Protected: 1
     Order: 0
>>> dc_frmobjs[frmtype].prt_dc_fldvals(fr_dic)
frame_ctrl: 54363
  duration: 123
        ra: ack-ra
       fcs: 33

>>> frmtype, fc_dic, fr_dic = mac_api.mkdics(pk_data, dc_frmobjs)
>>> frmtype
'DATA'
>>> dc_frmobjs['FC'].prt_dc_fldvals(fc_dic)
   ProtVer: 0
      Type: 2
   SubType: 0
      ToDS: 1
    FromDS: 1
 MoreFrags: 0
     Retry: 1
   PwrMgmt: 1
  MoreData: 0
 Protected: 1
     Order: 0
>>> dc_frmobjs[frmtype].prt_dc_fldvals(fr_dic)
frame_ctrl: 2139
  duration: 3
 address_1: dt-ad1
 address_2: dt-ad2
 address_3: dt-ad3
  seq_ctrl: 0
       qos: 0
        ht: 0
 address_4: dt-ad2
frame_body: this is data
       fcs: 22

>>> frmtype, fc_dic, fr_dic = mac_api.mkdics(pk_beacon, dc_frmobjs)
>>> frmtype
'Beacon'
>>> dc_frmobjs['FC'].prt_dc_fldvals(fc_dic)
   ProtVer: 0
      Type: 0
   SubType: 8
      ToDS: 1
    FromDS: 1
 MoreFrags: 0
     Retry: 1
   PwrMgmt: 1
  MoreData: 0
 Protected: 1
     Order: 0


==
== convert packets to hex for wireshark to import
==

Wireshark can read a file formatted with
   od -Ax -tx1 -v
Wireshark user's guide: http://www.wireshark.org/docs/wsug_html_chunked/index.html
Sample captures:  http://wiki.wireshark.org/SampleCaptures
Publicly available pcap files: http://www.netresec.com/?page=PcapFiles

>>> f= open('aux/pk_rts.bin', 'w'); f.write(pk_rts); f.close()
>>> os.system('cat aux/pk_rts.bin | od -Ax -tx1 -v > ./aux/pk_rts.hex')
0
>>> f= open('aux/pk_cts.bin', 'w'); f.write(pk_cts); f.close()
>>> os.system('cat aux/pk_cts.bin | od -Ax -tx1 -v > ./aux/pk_cts.hex')
0
>>> f= open('aux/pk_ack.bin', 'w'); f.write(pk_ack); f.close()
>>> os.system('cat aux/pk_ack.bin | od -Ax -tx1 -v > ./aux/pk_ack.hex')
0
>>> f= open('aux/pk_data.bin', 'w'); f.write(pk_data); f.close()
>>> os.system('cat aux/pk_data.bin | od -Ax -tx1 -v > ./aux/pk_data.hex')
0
>>> f= open('aux/pk_beacon.bin', 'w'); f.write(pk_beacon); f.close()
>>> os.system('cat aux/pk_beacon.bin | od -Ax -tx1 -v > ./aux/pk_beacon.hex')
0
>>> os.system('cat aux/pk_rts.hex aux/pk_cts.hex aux/pk_ack.hex aux/pk_data.hex aux/pk_beacon.hex > wshark.hex')
0
>>> os.system('rm aux/pk_rts.* aux/pk_cts.* aux/pk_ack.* aux/pk_data.* aux/pk_beacon.*')
0

