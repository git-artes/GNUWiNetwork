======
====== frames.txt : a doctest file for module frames.
======


>>> import struct
>>> import frames

===
=== PLCP, on bits
===
>>> plcp_mask_len=24
>>> plcp_bitbyte='bits'
>>> plcp_ls_fields=['rate', 'res', 'length', 'par', 'tail']
>>> plcp_dc_fields = {\
...     'rate'  : (0, 4, False, 'int'), \
...     'res'   : (4,5, False, 'bool'), \
...     'length': (5, 17, True, 'int'), \
...     'par'   : (17, 18, False, 'bool'), \
...     'tail'  : (18, plcp_mask_len, False, 'int')  }
>>> plcp_dc_fldvals = { \
...     'rate'  : 13, \
...     'res'   : False, \
...     'length': 23, \
...     'par'   : False, \
...     'tail'  : 0 }

>>> fr = frames.Frame(plcp_bitbyte, 3, plcp_mask_len, plcp_ls_fields, plcp_dc_fields, dc_fldvals=plcp_dc_fldvals)

>>> fr.prt_dc_fields()
      rate: 111100000000000000000000    0    4  False    int
       res: 000010000000000000000000    4    5  False   bool
    length: 000001111111111110000000    5   17   True    int
       par: 000000000000000001000000   17   18  False   bool
      tail: 000000000000000000111111   18   24  False    int

>>> fr.prt_dc_fldvals()
      rate: 13
       res: False
    length: 23
       par: False
      tail: 0

>>> pk = fr.mkpkt()
>>> pk, len(pk)
('\xd0\x0b\x80', 3)
>>> fr.dc_fldvals = fr.mkdic(pk)

>>> fr.prt_dc_fldvals(fr.dc_fldvals)
      rate: 13
       res: 0
    length: 23
       par: 0
      tail: 0

===
=== MAC frame control, on bits
===
>>> fc_mask_len=16
>>> fc_bitbyte='bits'
>>> fc_ls_fields=['ProtVer', 'Type', 'SubType', 'ToDS', 'FromDS', 'MoreFrags', 'Retry', 'PwrMgmt', 'MoreData', 'Protected', 'Order']

>>> fc_dc_fields = { \
...     'ProtVer'  : (0, 2, False, 'int'), \
...     'Type'     : (2, 4, False, 'int'), \
...     'SubType'  : (4, 8, True, 'int'), \
...     'ToDS'     : (8, 9, False, 'bool'), \
...     'FromDS'   : (9, 10, False, 'bool'), \
...     'MoreFrags': (10, 11, False, 'bool'), \
...     'Retry'    : (11,12, False, 'bool'), \
...     'PwrMgmt'  : (12,13, False, 'bool'), \
...     'MoreData' : (13,14, False, 'bool'), \
...     'Protected': (14,15, False, 'bool'), \
...     'Order'    : (15,16, False, 'bool')
...     }

An RTS frame control field, subtype 0b1011 == 11
>>> fc_dc_fldvals = { \
...     'ProtVer'  : 0, \
...     'Type'     : 1, \
...     'SubType'  : 11, \
...     'ToDS'     : True, \
...     'FromDS'   : False, \
...     'MoreFrags': 0, \
...     'Retry'    : 0, \
...     'PwrMgmt'  : 0, \
...     'MoreData' : 0, \
...     'Protected': 0, \
...     'Order'    : 0
...     }

>>> fr_fc = frames.Frame(fc_bitbyte, 2, fc_mask_len, fc_ls_fields, fc_dc_fields, dc_fldvals= fc_dc_fldvals)

>>> fr_fc.prt_dc_fields()
   ProtVer: 1100000000000000    0    2  False    int
      Type: 0011000000000000    2    4  False    int
   SubType: 0000111100000000    4    8   True    int
      ToDS: 0000000010000000    8    9  False   bool
    FromDS: 0000000001000000    9   10  False   bool
 MoreFrags: 0000000000100000   10   11  False   bool
     Retry: 0000000000010000   11   12  False   bool
   PwrMgmt: 0000000000001000   12   13  False   bool
  MoreData: 0000000000000100   13   14  False   bool
 Protected: 0000000000000010   14   15  False   bool
     Order: 0000000000000001   15   16  False   bool

>>> fr_fc.prt_dc_fldvals()
   ProtVer: 0
      Type: 1
   SubType: 11
      ToDS: True
    FromDS: False
 MoreFrags: 0
     Retry: 0
   PwrMgmt: 0
  MoreData: 0
 Protected: 0
     Order: 0


>>> pk = fr_fc.mkpkt()
>>> pk, len(pk)
('\x1b\x80', 2)
>>> dc_fldvals = fr_fc.mkdic(pk)
>>> fr_fc.prt_dc_fldvals(dc_fldvals)
   ProtVer: 0
      Type: 1
   SubType: 11
      ToDS: 1
    FromDS: 0
 MoreFrags: 0
     Retry: 0
   PwrMgmt: 0
  MoreData: 0
 Protected: 0
     Order: 0

An CTS frame control field, subtype 0b1100 == 12
>>> fr_fc.dc_fldvals.update( {'SubType': 12, 'Type': 1} )
>>> #fr_fc.prt_dc_fldvals()
>>> pk = fr_fc.mkpkt()
>>> dc_fldvals = fr_fc.mkdic(pk)
>>> fr_fc.prt_dc_fldvals(dc_fldvals)
   ProtVer: 0
      Type: 1
   SubType: 12
      ToDS: 1
    FromDS: 0
 MoreFrags: 0
     Retry: 0
   PwrMgmt: 0
  MoreData: 0
 Protected: 0
     Order: 0

===
=== MAC frames, on bytes
===
>>> mac_mask_len=40
>>> mac_bitbyte='bytes'
>>> mac_frame_len = 40        # assumes no data, len(frame_body) == 0
>>> mac_ls_fields= ['frame_ctrl', 'duration', 'address_1', 'address_2', 'address_3', 'seq_ctrl', 'qos', 'ht', 'address_4', 'frame_body', 'fcs']
>>> mac_dc_fields = {\
...     'frame_ctrl' : (0, 2, False, '!2s'), \
...     'duration'   : (2, 4, False, '!H'), \
...     'address_1'  : (4, 10, False, '!6s'), \
...     'address_2'  : (10, 16, False, '!6s'), \
...     'address_3'  : (16, 22, False, '!6s'), \
...     'seq_ctrl'   : (22, 24, False, '!H'), \
...     'qos'        : (24, 26, False, '!H'), \
...     'ht'         : (26, 30, False, '!I'), \
...     'address_4'  : (30, 36, False, '!6s'), \
...     'frame_body' : (36, 2342, False, '!s'), \
...     'fcs'         : (-4, None, False, '!I')  }
>>> mac_dc_fldvals = { \
...     'frame_ctrl' : 'fc', \
...     'duration'   : 23, \
...     'address_1'  : 'addr_1', \
...     'address_2'  : 'addr_2', \
...     'address_3'  : 'addr_3', \
...     'seq_ctrl'   : 0, \
...     'qos'        : 0, \
...     'ht'         : 0, \
...     'address_4'  : 'addr_4', \
...     'frame_body' : 'this is the frame body!', \
...     'fcs'         : 0 }

Adjustments required for variable length field 'frame_body' and subsequent fields:
>>> mac_len = 40 + len(mac_dc_fldvals['frame_body'])
>>> mac_fr = frames.Frame(mac_bitbyte, mac_len, mac_mask_len, mac_ls_fields, mac_dc_fields, dc_fldvals=mac_dc_fldvals)
>>> mac_fr.dc_fields['frame_body'] = frames.FieldTemplate(36, mac_len-4, False, '!'+str(mac_len-4-36)+'s', 'frame_body, bytes')
>>> mac_fr.dc_fields['fcs']        = frames.FieldTemplate(mac_len-4, mac_len, False, '!I', 'fcs, bytes       ')

>>> mac_fr.prt_dc_fields()
frame_ctrl: bytes, no bitmask    0    2  False    !2s
  duration: bytes, no bitmask    2    4  False     !H
 address_1: bytes, no bitmask    4   10  False    !6s
 address_2: bytes, no bitmask   10   16  False    !6s
 address_3: bytes, no bitmask   16   22  False    !6s
  seq_ctrl: bytes, no bitmask   22   24  False     !H
       qos: bytes, no bitmask   24   26  False     !H
        ht: bytes, no bitmask   26   30  False     !I
 address_4: bytes, no bitmask   30   36  False    !6s
frame_body: frame_body, bytes   36   59  False   !23s
       fcs: fcs, bytes          59   63  False     !I
>>> mac_fr.prt_dc_fldvals()
frame_ctrl: fc
  duration: 23
 address_1: addr_1
 address_2: addr_2
 address_3: addr_3
  seq_ctrl: 0
       qos: 0
        ht: 0
 address_4: addr_4
frame_body: this is the frame body!
       fcs: 0

>>> pk = mac_fr.mkpkt()
>>> pk, len(pk)
('fc\x00\x17addr_1addr_2addr_3\x00\x00\x00\x00\x00\x00\x00\x00addr_4this is the frame body!\x00\x00\x00\x00', 63)

>>> mac_fr.dc_fldvals = {}    # reinitialize, nothing left from previous data
>>> mac_fr.dc_fldvals
{}
>>> mac_dc_fldvals = mac_fr.mkdic(pk)
>>> mac_fr.prt_dc_fldvals(mac_dc_fldvals)
frame_ctrl: fc
  duration: 23
 address_1: addr_1
 address_2: addr_2
 address_3: addr_3
  seq_ctrl: 0
       qos: 0
        ht: 0
 address_4: addr_4
frame_body: this is the frame body!
       fcs: 0




