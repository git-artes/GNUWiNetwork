====
==== mac_mgmt.txt : a doctest file for MAC management formats.
====

>>> import os

== Test for a beacon frame

>>> import mac_mgmt
>>> import mac_api

A dictionary with an object for each type of frame:
>>> dc_frmobjs = mac_api.mkdcfrmobjs()
>>> print dc_frmobjs.keys()
['CTS', 'ACK', 'Beacon', 'FC', 'RTS', 'DATA']

Makes beacon frame body
>>> import mac_mgmt
>>> bfb = mac_mgmt.BeaconFrameBody()
>>> bfbpk = bfb.mkpkt()
>>> bfbpk
'\x00\x00\x00\x00\x00\x00\x00\x01\x00\x14\x00\x00\x00 SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\x01\nRRRRRRRRRR'

Makes beacon frame, inserts beacon frame body into frame_body field.
>>> bf = mac_api.mkfrpkt('Beacon', dc_frmobjs, fr_dc_fldvals={'frame_body':bfbpk})
>>> bf
'\x80\x00\x00\x00dt-ad1dt-ad2dt-ad3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x14\x00\x00\x00 SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\x01\nRRRRRRRRRR\x00\x00\x00\x00'

Use same beacon frame, setting field values.
>>> bf1 = mac_api.mkfrpkt('Beacon', dc_frmobjs, fr_dc_fldvals={'frame_body':bfbpk}, fc_dc_fldvals={'Retry':45})
>>> bf1
'\x81h\x00\x00dt-ad1dt-ad2dt-ad3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x14\x00\x00\x00 SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\x01\nRRRRRRRRRR\x00\x00\x00\x00'
>>> bf1 = mac_api.mkfrpkt('Beacon', dc_frmobjs, fr_dc_fldvals={'frame_body':bfbpk}, fc_dc_fldvals={'Retry':0})
>>> bf1 == bf
True

>>> f= open('aux/pk_beacon1.bin', 'w'); f.write(bf1); f.close()
>>> os.system('cat ./aux/pk_beacon1.bin | od -Ax -tx1 -v > ./aux/pk_beacon1.hex')
0


Change values in beacon frame body;
>>> bfb.updtfldvals({'Timestamp':2, 'BeaconInterval':40, 'SSID':chr(0) + chr(32) + 'The SSID for this packet--------'})
>>> bfb.prt_dc_fldvals()
 Timestamp: 2
BeaconInterval: 40
CapabilitiesInfo: 0
      SSID:  The SSID for this packet--------
SupportedRates: 
RRRRRRRRRR

>>> bfbpk = bfb.mkpkt()
>>> len(bfbpk), bfbpk
(58, '\x00\x00\x00\x00\x00\x00\x00\x02\x00(\x00\x00\x00 The SSID for this packet--------\x01\nRRRRRRRRRR')

Insert beacon frame body into beacon packet:
>>> bf2 = mac_api.mkfrpkt('Beacon', dc_frmobjs, fr_dc_fldvals={'frame_body':bfbpk})
>>> len(bf2), bf2
(86, '\x80\x00\x00\x00dt-ad1dt-ad2dt-ad3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00(\x00\x00\x00 The SSID for this packet--------\x01\nRRRRRRRRRR\x00\x00\x00\x00')

>>> f = open('aux/pk_beacon2.bin', 'w'); f.write(bf2); f.close()
>>> os.system('cat ./aux/pk_beacon2.bin | od -Ax -tx1 -v > ./aux/pk_beacon2.hex')
0

>>> os.system('cat ./aux/pk_beacon[12].hex > aux/pk_beacons.hex')
0


