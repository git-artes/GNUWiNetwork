#!/usr/bin/env python
########################################################
##Cheetah template - gnuradio_python
##
##@param imports the import statements
##@param flow_graph the flow_graph
##@param variables the variable blocks
##@param parameters the paramater blocks
##@param blocks the signal blocks
##@param connections the connections
##@param messages the msg type connections
##@param generate_options the type of flow graph
##@param var_id2cbs variable id map to callback strings
########################################################
#def indent($code)
#set $code = '\n\t\t'.join(str($code).splitlines())
$code#slurp
#end def
#import time
#set $DIVIDER = '#'*50
$DIVIDER
# GNU Wireless Network Flow Graph
# Title: $title
#if $flow_graph.get_option('author')
# Author: $flow_graph.get_option('author')
#end if
#if $flow_graph.get_option('description')
# Description: $flow_graph.get_option('description')
#end if
# Generated: $time.ctime()
$DIVIDER
import os
##os.chdir("/home/belza/Dropbox/gn/gn/scripts/")
##os.chdir("/home/belza/Desktop/Dropbox/gn/gn/scripts/")
##os.chdir("/homensk/victor/IIE/GNUnetwork/gn/scripts/")
os.chdir("../../scripts/")
print os.getcwd()

import sys
sys.path +=['..']
########################################################
##Create Imports
########################################################
#for $imp in $imports
$imp
#end for

########################################################
##Create Class
##	Write the class declaration for a top or hier block.
##	The parameter names are the arguments to __init__.
##	Determine the absolute icon path (wx gui only).
##	Setup the IO signature (hier block only).
########################################################
#set $class_name = $flow_graph.get_option('id')
#set $param_str = ', '.join(['self'] + ['%s=%s'%(param.get_id(), param.get_make()) for param in $parameters])
class $(class_name)(gwnTB.GWNTopBlock):


	def __init__($param_str):
		gwnTB.GWNTopBlock.__init__($param_str)

########################################################
##Create Parameters
##	Set the parameter to a property of self.
########################################################
#if $parameters

		$DIVIDER
		# Parameters
		$DIVIDER
#end if
#for $param in $parameters
		$indent($param.get_var_make())
#end for
########################################################
##Create Variables
########################################################
#if $variables

		$DIVIDER
		# Variables
		$DIVIDER
#end if
#for $var in $variables
		$indent($var.get_var_make())
#end for
########################################################
##Create Blocks
########################################################
#if $blocks

		$DIVIDER
		# Blocks
		$DIVIDER
#end if
#for $blk in filter(lambda b: b.get_make(), $blocks)
	#if $blk in $variables
		$indent($blk.get_make())
	#else
		self.$blk.get_id() = $indent($blk.get_make())	
	#end if
#end for



########################################################
##Create Connections
##	The port name should be the id of the parent block.
##	However, port names for IO pads should be self.
########################################################
#def make_port_sig($port)
	#if $port.get_parent().get_key() == 'pad_source'
(self, $flow_graph.get_pad_sources().index($port.get_parent()))#slurp
	#elif $port.get_parent().get_key() == 'pad_sink'
(self, $flow_graph.get_pad_sinks().index($port.get_parent()))#slurp
	#else
(self.$port.get_parent().get_id(), $port.get_key())#slurp
	#end if
#end def
#if $connections

		$DIVIDER
		# Connections
		$DIVIDER
#end if
#for $con in $connections
	#set $source = $con.get_source()
	#set $sink = $con.get_sink()
	##resolve virtual sources to the actual sources
	#if $source.get_parent().is_virtual_source()
		#set $source = $source.resolve_virtual_source()
	#end if
	##do not generate connections with virtual sinks
	#if not $sink.get_parent().is_virtual_sink()
		self.connect($make_port_sig($source), $make_port_sig($sink))
	#end if
#end for

########################################################
##Start Blocks
########################################################
#if $blocks

		$DIVIDER
		# Starting Bloks
		$DIVIDER
#end if
#for $blk in filter(lambda b: b.get_make(), $blocks)
	#if $blk in $variables
		$indent()
	#else
		$blk.get_start()
	#end if
#end for


	def stop(self):
		########################################################
		##Stop All Blocks
		########################################################
		#if $blocks

		$DIVIDER
		# Ending Bloks
		$DIVIDER
		#end if
		#for $blk in filter(lambda b: b.get_make(), $blocks)
		#if $blk in $variables
		$indent()
		#else
		$blk.get_stop()
		#end if
		#end for



########################################################
##Create Main
##	For top block code, generate a main routine.
##	Instantiate the top block and run as gui or cli.
########################################################
if __name__ == '__main__':
	##parser = OptionParser(option_class=eng_option, usage="%prog: [options]")
	#set $params_eq_list = list()
	##for $param in $parameters
		##set $type = $param.get_param('type').get_value()
		##if $type
			##silent $params_eq_list.append('%s=options.%s'%($param.get_id(), $param.get_id()))
	##parser.add_option("$make_short_id($param)", "--$param.get_id().replace('_', '-')", dest="$param.get_id()", type="$type", default=$make_default($type, $param),
	##	help="Set $($param.get_param('label').get_evaluated() or $param.get_id()) [default=%default]")
	##	#end if
	##end for
	##(options, args) = parser.parse_args()
	tb = $(class_name)($(', '.join($params_eq_list)))
	
	c = raw_input('Press #z to end, or #w to test commands :')        
    	while c != "#z":
       		c = raw_input('Press #z to end, or #w to test commands :')    

	    
	tb.stop()           
    	print "Program ends"
    	exit(0)

